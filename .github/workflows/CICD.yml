name: CI/CD Pipeline with Terraform

on:
  push:
    branches: 
      - master

jobs:
  terraform:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for Terraform state management

      - name: Verify Directory Structure
        run: |
          echo "Workspace: ${{ runner.workspace }}"
          echo "GitHub Workspace: ${{ github.workspace }}"
          echo "Current directory: $(pwd)"
          ls -la
          echo "Checking infrastructure directory:"
          if [ -d "infrastructure" ]; then
            ls -la infrastructure
          else
            echo "Error: Infrastructure directory not found!"
            exit 1
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Terraform Init
        run: |
          cd infrastructure || exit 1
          terraform init
        shell: bash

      - name: Terraform Plan
        run: |
          cd infrastructure || exit 1
          terraform plan
        shell: bash

      - name: Terraform Apply
        run: |
          cd infrastructure || exit 1
          terraform apply -auto-approve
        shell: bash

  deploy:
    runs-on: self-hosted
    needs: [terraform]  # Ensure deploy runs after terraform
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Verify Repository Structure
        run: |
          echo "Current directory: $(pwd)"
          ls -la
          echo "Required directories:"
          [ -d "frontend" ] && echo "frontend exists" || echo "frontend missing"
          [ -d "backend" ] && echo "backend exists" || echo "backend missing"
          [ -d "manifests" ] && echo "manifests exists" || echo "manifests missing"

      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=my-project
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Install Trivy
        run: |
          sudo curl -sfL https://github.com/aquasecurity/trivy/releases/latest/download/trivy_linux_$(dpkg --print-architecture).deb -o trivy.deb
          sudo dpkg -i trivy.deb
          trivy --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Frontend
        run: |
          if [ ! -d "frontend" ]; then
            echo "##[error]Frontend directory not found!"
            exit 1
          fi
          cd frontend
          docker build -t frontend . || exit 1
          trivy image --exit-code 0 --severity HIGH,CRITICAL frontend
          docker tag frontend:latest 958978679682.dkr.ecr.us-east-1.amazonaws.com/frontend:latest
          docker push 958978679682.dkr.ecr.us-east-1.amazonaws.com/frontend:latest

      - name: Build and Push Backend
        run: |
          if [ ! -d "backend" ]; then
            echo "##[error]Backend directory not found!"
            exit 1
          fi
          cd backend
          docker build -t backend . || exit 1
          trivy image --exit-code 0 --severity HIGH,CRITICAL backend
          docker tag backend:latest 958978679682.dkr.ecr.us-east-1.amazonaws.com/backend:latest
          docker push 958978679682.dkr.ecr.us-east-1.amazonaws.com/backend:latest

      - name: Configure Kubernetes Access
        run: |
          aws eks update-kubeconfig --name my-eks-cluster --region us-east-1
          kubectl cluster-info

      - name: Deploy to Kubernetes
        run: |
          if [ ! -d "manifests" ]; then
            echo "##[error]Manifests directory not found!"
            exit 1
          fi
          cd manifests
          kubectl apply -f db-secret.yaml
          kubectl apply -f backend.yaml
          kubectl apply -f frontend.yaml
